/*
    For this project, I downloaded Spotify data from Kaggle.
    I then created a table to insert Spotify data into.
    Finally, I performed analytics on the data using SQL in SQLite Studios.
*/

-- Created the table
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

-- Then I inserted the Spotify data .csv into the table. 

-- Next, I explored the data using the following SQL.
SELECT *
FROM BIT_DB.Spotifydata;

-- Afterwards, I answered questions using SQL and the data. 

-- What is the avg popularity, danceability, and energy by artist and track?

SELECT artist_name, track_name, avg(popularity), avg(danceability), avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

-- Who are the top 10 artists based on average song popularity?

SELECT DISTINCT artist_name, AVG(popularity) AS avg_song_popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING AVG(popularity)
ORDER BY popularity DESC
LIMIT 10;

-- What artist released the longest song and how long is that song?

SELECT artist_name, MAX(duration_ms)
FROM BIT_DB.Spotifydata;

-- what is the most popular song by each artist?

SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING MAX(popularity)
ORDER BY popularity DESC;

-- which artist / song has the fastest beats per minute (BPM)?

SELECT artist_name, track_name, MAX(tempo)
FROM BIT_DB.Spotifydata;
